{"version":3,"sources":["components/Note.js","services/NoteService.js","components/Notification.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseURL","ns","getAll","request","axios","get","nonExisting","id","date","then","response","data","concat","create","noteObj","post","update","changedNote","put","clear","len","i","delete","Notification","message","Footer","style","color","fontStyle","fontSize","Button","event","text","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","NoteService","initialNotes","console","log","length","filter","n","map","find","updatedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","preventDefault","noteObject","Date","toISOString","Math","random","createdNote","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"8KAaeA,G,MAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,qBAAuB,iBACtD,OACE,qCACE,oBAAIC,UAAW,OAAf,SACGJ,EAAKK,UAER,wBAAQC,QAASL,EAAjB,SAAoCC,S,gBCPpCK,EAAU,kCAuCDC,EARJ,CACPC,OA7BW,WACX,IAAMC,EAAUC,IAAMC,IAAIL,GACpBM,EAAc,CAChBC,GAAI,MACJT,QAAS,6BACTU,KAAM,2BACNZ,WAAW,GAEf,OAAOO,EACFM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAON,OAqB3CO,OAlBW,SAACC,GAEZ,OADgBV,IAAMW,KAAKf,EAASc,GACrBL,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAiBzCK,OAdW,SAACT,EAAIU,GAChB,OAAOb,IAAMc,IAAN,UAAalB,EAAb,YAAwBO,GAAMU,GAAaR,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAc5EQ,MAXU,SAACC,GACX,IAAI,IAAIC,EAAI,EAAGA,GAAKD,EAAKC,IACrBjB,IACCkB,OAAOtB,EAAQ,IAAIqB,KCfbE,EAZM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACnB,OAAe,OAAZA,EACQ,KAIP,qBAAK3B,UAAY,QAAjB,SACK2B,KCAPC,EAAS,WAOb,OACE,sBAAKC,MAPa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAIV,UACE,uBACA,2DAKAC,EAAS,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KACvB,OAAO,wBAAQjC,QAASgC,EAAjB,SAAyBC,KAG5BC,EAAM,SAACC,GAAW,IAAD,EACKC,mBAAS,IADd,mBACdC,EADc,KACPC,EADO,OAESF,mBAAS,iBAFlB,mBAEdG,EAFc,KAELC,EAFK,OAGSJ,oBAAS,GAHlB,mBAGdK,EAHc,KAGLC,EAHK,OAImBN,mBAAS,mCAJ5B,mBAIdO,EAJc,KAIAC,EAJA,KAerBC,qBARqB,WACnBC,EACG3C,SACAO,MAAK,SAAAqC,GACJC,QAAQC,IAAI,2CACZX,EAASS,QAGS,IAqDxB,OACE,gCACE,uCACA,cAAC,EAAD,CAActB,QAASkB,IACvB,cAAC,EAAD,CACEX,MAdkB,WACtBU,GAAYD,IAcRR,KAAMQ,EAAU,iBAAmB,aACrC,cAAC,EAAD,CAAQT,MAZQ,WAClBc,EAAY1B,MAAMiB,EAAMa,QACxBZ,EAAS,KAUqBL,KAAK,UAEjC,8BArBKQ,EAAUJ,EAAQA,EAAMc,QAAO,SAACC,GAAD,OAAuB,IAAhBA,EAAEvD,cAsB5BwD,KAAI,SAAC3D,EAAM4B,GAAP,OACjB,cAAC,EAAD,CAAc5B,KAAMA,EAAMC,iBAAkB,kBAzCzB,SAAAa,GACzB,IAAMd,EAAO2C,EAAMiB,MAAK,SAAAF,GAAC,OAAIA,EAAE5C,KAAOA,KAChCU,EAAW,2BAAQxB,GAAR,IAAcG,WAAYH,EAAKG,YAEhDiD,EACG7B,OAAOT,EAAIU,GACXR,MAAK,SAAA6C,GACJjB,EAASD,EAAMgB,KAAI,SAAAD,GAAC,OAAIA,EAAE5C,KAAOA,EAAK4C,EAAIG,SAG3CC,OAAM,SAAAC,GACLb,EAAgB,aAAD,OAAclD,EAAKK,QAAnB,sCACf2D,YAAW,kBAAMd,EAAgB,QAAO,KACxCN,EAASD,EAAMc,QAAO,SAAAC,GAAC,OAAIA,EAAE5C,KAAOA,SA4BgBmD,CAAmBjE,EAAKc,MAA/Dc,QAKf,uBAAMsC,SAnEM,SAAC5B,GACfA,EAAM6B,iBACN,IAAMC,EAAa,CACjB/D,QAASwC,EACT9B,MAAM,IAAIsD,MAAOC,cACjBnE,UAAWoE,KAAKC,SAAW,IAG7BpB,EACGhC,OAAOgD,GACPpD,MAAK,SAAAyD,GACJnB,QAAQC,IAAIkB,GACZ7B,EAASD,EAAMxB,OAAOsD,IACtB3B,EAAW,QAsDb,UACE,uBAAO4B,MAAO7B,EAAS8B,SAnDJ,SAACrC,GACxBQ,EAAWR,EAAMsC,OAAOF,UAmDpB,wBAAQG,KAAK,SAAb,qBAEF,cAAC,EAAD,QAMNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.30bef584.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important ? 'make not important' : 'make important'\r\n  return (\r\n    <>\r\n      <li className= 'note'>\r\n        {note.content}\r\n      </li>\r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </>\r\n  );\r\n};\r\nexport default Note;\r\n//called wrapped in the ordered list\r\n","import axios from 'axios'\r\n\r\nconst baseURL = 'http://localhost:3001/api/notes'\r\n\r\n//returning the response / promise from db\r\nconst getAll = () => {\r\n    const request = axios.get(baseURL)\r\n    const nonExisting = {\r\n        id: 10304, \r\n        content: 'this note is not in the db',\r\n        date: '2019-05-30T17:30:31.098Z',\r\n        important: true\r\n    }\r\n    return request\r\n        .then(response => response.data.concat(nonExisting)) //still returns a promise, then function returns a promise, \"promise chaining\"\r\n}\r\n\r\nconst create = (noteObj) => {\r\n    const request = axios.post(baseURL, noteObj)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, changedNote) => {\r\n    return axios.put(`${baseURL}/${id}`, changedNote).then(response => response.data)\r\n}\r\n\r\nconst clear = (len) => {\r\n    for(let i = 1; i <= len; i++){\r\n        axios\r\n        .delete(baseURL+'/'+i)\r\n    }\r\n}\r\n\r\nconst ns = {\r\n    getAll,\r\n    create, \r\n    update,\r\n    clear\r\n}\r\n\r\n//returns an object with all 3 of the functions as properties, \r\nexport default ns\r\n\r\n","import React from 'react'\r\n\r\nconst Notification = ({message}) => {\r\n    if(message === null){\r\n        return null; //nothing gets rendered\r\n    }\r\n\r\n    return (\r\n        <div className = 'error'>\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import React, { useState, useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport './index.css'\r\n\r\nimport Note from './components/Note';\r\nimport NoteService from './services/NoteService'\r\nimport Notification from './components/Notification';\r\n\r\nconst Footer = () => {\r\n  const footerStyle = { //inline styles are different as words must be wrapped as strings\r\n    color: 'green',\r\n    fontStyle: 'italic',\r\n    fontSize: 16\r\n  }\r\n\r\n  return (\r\n    <div style={footerStyle}>\r\n      <br />\r\n      <em>Note app by Alex Wang</em>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Button = ({ event, text }) => {\r\n  return <button onClick={event}>{text}</button>;\r\n};\r\n\r\nconst App = (props) => {\r\n  const [notes, setNotes] = useState([]);\r\n  const [newNote, setNewNote] = useState(\"a new note...\");\r\n  const [showAll, setShowAll] = useState(true);\r\n  const [errorMessage, setErrorMessage] = useState('place holder some error occured')\r\n\r\n\r\n  const loadDataHook = () => {\r\n    NoteService\r\n      .getAll()\r\n      .then(initialNotes => {\r\n        console.log('response fufilled, inital notes fetched')\r\n        setNotes(initialNotes)\r\n      })\r\n  }\r\n  useEffect(loadDataHook, [])\r\n\r\n  const addNote = (event) => {\r\n    event.preventDefault();\r\n    const noteObject = {\r\n      content: newNote,\r\n      date: new Date().toISOString(),\r\n      important: Math.random() > 0.5,\r\n    };\r\n\r\n    NoteService\r\n      .create(noteObject)\r\n      .then(createdNote => {\r\n        console.log(createdNote)\r\n        setNotes(notes.concat(createdNote))\r\n        setNewNote('') //blank field\r\n      })\r\n  }\r\n\r\n  const handleNoteChange = (event) => {\r\n    setNewNote(event.target.value);\r\n  };\r\n\r\n  const toggleImportanceOf = id => {\r\n    const note = notes.find(n => n.id === id)\r\n    const changedNote = { ...note, important: !note.important } //copy all of the properties in the found note and replace its importance\r\n\r\n    NoteService\r\n      .update(id, changedNote)\r\n      .then(updatedNote => {\r\n        setNotes(notes.map(n => n.id !== id ? n : updatedNote))\r\n        //cool use of map function conditionally copy values for an array to a returned one if it doesnt have the changed id..\r\n      })\r\n      .catch(error => {\r\n        setErrorMessage(`The note \"${note.content}\" was already deleted from server`)\r\n        setTimeout(() => setErrorMessage(null), 5000)\r\n        setNotes(notes.filter(n => n.id !== id))\r\n      })\r\n  }\r\n\r\n  const notesToShow = () => {\r\n    return showAll ? notes : notes.filter((n) => n.important === true);\r\n  };\r\n\r\n  const handleShowClick = () => {\r\n    setShowAll(!showAll);\r\n  };\r\n\r\n  const handleClear = () => {\r\n    NoteService.clear(notes.length)\r\n    setNotes([])\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Notes</h1>\r\n      <Notification message={errorMessage} />\r\n      <Button\r\n        event={handleShowClick}\r\n        text={showAll ? \"show important\" : \"show all\"} />\r\n      <Button event={handleClear} text=\"clear\" />\r\n\r\n      <ul>\r\n        {notesToShow().map((note, i) => (\r\n          <Note key={i} note={note} toggleImportance={() => toggleImportanceOf(note.id)} />\r\n        ))}\r\n      </ul>\r\n\r\n      {/* event handlers for html form*/}\r\n      <form onSubmit={addNote}>\r\n        <input value={newNote} onChange={handleNoteChange} />\r\n        <button type=\"submit\">save</button>\r\n      </form>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}